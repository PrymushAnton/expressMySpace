model Album {
  id           Int      @id @default(autoincrement())
  name         String
  createdAt    DateTime @default(now())
  previewImage String?
  shown        Boolean  @default(true)
  topicId      Int
  topic        Tag      @relation(fields: [topicId], references: [id])
  images       Image[]
}

model Avatar {
  id        Int     @id @default(autoincrement())
  image     String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
  active    Boolean @default(true) // Чи активна ця аватарка
  shown     Boolean @default(true) // Чи показана ця аватарка
}

model ChatGroup {
  id        Int           @id @default(autoincrement())
  name      String
  adminId   Int
  admin     Profile       @relation("AdminGroups", fields: [adminId], references: [id])
  members   Profile[]     @relation("GroupMembers")
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
}

model ChatMessage {
  id        Int       @id @default(autoincrement())
  text      String
  senderId  Int
  sender    Profile   @relation(fields: [senderId], references: [id])
  groupId   Int
  group     ChatGroup @relation(fields: [groupId], references: [id])
  createdAt DateTime  @default(now())
}

model Friendship {
  id         Int     @id @default(autoincrement())
  fromId     Int
  toId       Int
  isAccepted Boolean @default(false)

  from Profile @relation("SentFriendRequests", fields: [fromId], references: [id])
  to   Profile @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model Image {
  id         Int      @id @default(autoincrement())
  filename   String
  file       String
  uploadedAt DateTime @default(now())
  postId     Int?
  post       Post?    @relation(fields: [postId], references: [id])
  albumId    Int?
  album      Album?   @relation(fields: [albumId], references: [id])
}

model Link {
  id     Int    @id @default(autoincrement())
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
}

model Post {
  id       Int       @id @default(autoincrement())
  title    String
  content  String
  authorId Int
  author   Profile   @relation(fields: [authorId], references: [id])
  views    Profile[] @relation("PostViews")
  likes    Profile[] @relation("PostLikes")
  tags     Tag[]
  images   Image[]
  links    Link[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  dateOfBirth DateTime?
  signature   String?

  avatars                Avatar[]
  posts                  Post[]
  postsViewed            Post[]        @relation("PostViews")
  postsLiked             Post[]        @relation("PostLikes")
  chats                  ChatGroup[]   @relation("GroupMembers")
  messages               ChatMessage[]
  administeredGroups     ChatGroup[]   @relation("AdminGroups")
  sentFriendRequests     Friendship[]  @relation("SentFriendRequests")
  receivedFriendRequests Friendship[]  @relation("ReceivedFriendRequests")
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  posts  Post[]
  albums Album[]
}

model User {
  id           Int       @id @default(autoincrement())
  password     String
  last_login   DateTime?
  is_superuser Boolean   @default(false)
  username     String?   @unique
  last_name    String?
  email        String    @unique
  is_staff     Boolean   @default(false)
  is_active    Boolean   @default(true)
  date_joined  DateTime  @default(now())
  first_name   String?

  profile Profile?
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
